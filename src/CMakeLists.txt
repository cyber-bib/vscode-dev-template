cmake_minimum_required(VERSION 3.0.0 FATAL_ERROR)

# Default project name (usage not recommended)
	string(REPLACE "/" ";" CMAKE_PROJECT_NAME ${CMAKE_CURRENT_LIST_DIR})
	list(GET CMAKE_PROJECT_NAME -2 CMAKE_PROJECT_NAME)

project(${CMAKE_PROJECT_NAME}
	VERSION 0.0.0.1
	DESCRIPTION ""
	HOMEPAGE_URL ""
	LANGUAGES C CXX
)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# get_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
# message(STATUS "Genarator type: ${isMultiConfig}")
# message(STATUS "${CMAKE_CONFIGURATION_TYPES}")

include(GNUInstallDirs)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

# foreach(TYPE IN LISTS CMAKE_CONFIGURATION_TYPES)
# 	string(TOUPPER "${TYPE}" TYPE_DIR)
# 	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${TYPE_DIR} "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}/${TYPE}")
# 	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${TYPE_DIR} "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}/${TYPE}")
# 	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${TYPE_DIR} "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${TYPE}")

# 	# message(STATUS "type: ${TYPE} (${TYPE_DIR})")
# 	# message(STATUS "path: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_${TYPE_DIR}}")
# endforeach()
# message(STATUS "path: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE}")


add_executable(${CMAKE_PROJECT_NAME}-bin main.cxx)
set_target_properties(${CMAKE_PROJECT_NAME}-bin
	PROPERTIES
		OUTPUT_NAME ${CMAKE_PROJECT_NAME}
)

add_custom_target(genexdebug COMMAND ${CMAKE_COMMAND} -E echo "configuration type: $<CONFIG>")